
import flash.media.Sound;
import flash.events.SampleDataEvent;
import flash.utils.ByteArray;
import flash.net.FileFilter;
import flash.net.URLRequest;
import flash.events.Event;
import flash.display.BitmapData;
import flash.display.Bitmap;
import flash.geom.Rectangle;
import flash.events.MouseEvent;
import flash.display.Sprite;
import flash.display.Graphics;
import flash.filters.GradientBevelFilter;




var BUF_SIZE=4096;


var timeline:BitmapData=new BitmapData(1000,100,false);
var timeline_bitmap=new Bitmap(timeline);
addChild(timeline_bitmap);
stage.addEventListener(MouseEvent.MOUSE_MOVE,onMove);

var timeline_cursor=new Sprite();
var g:Graphics=timeline_cursor.graphics;
g.lineStyle(1,0xFF0000,1,false,"normal");
g.moveTo(0,0);
g.lineTo(0,100);
addChild(timeline_cursor);

var monitor=new Sprite();
addChild(monitor);

var win_overlay=new Sprite();
addChild(win_overlay);


function update(){
    timeline_cursor.x=pos/BUF_SIZE;
    var g:Graphics=win_overlay.graphics;
    g.clear();
    g.beginFill(0xFF0000,.2);
    g.drawRect(0,0,window/10,100);
    g.endFill();
}


var playback:Sound=new Sound();
playback.addEventListener(SampleDataEvent.SAMPLE_DATA,getSound);


var infile:Sound=new Sound();
infile.addEventListener(Event.COMPLETE,init);
infile.load(new URLRequest("index.mp3"));

var bytes:ByteArray=new ByteArray();

var pos=0;
var window=BUF_SIZE;

windowSlider.addEventListener(Event.CHANGE,changeWindow);
function changeWindow(e){
    window=windowSlider.value*BUF_SIZE;
    update();
}

function init(e){
    var q,w,max=0,len=BUF_SIZE*2,sample;
    var rect:Rectangle=new Rectangle(0,0,1,100);
    var rms;
    for(w=0;w<500;w++){
	max=0;
	rms=0;
	    bytes.position=0;
    infile.extract(bytes,BUF_SIZE);
		bytes.position=0;

	    for(q=0;q<len;q++){
	sample=Math.abs(bytes.readFloat());
	rms+=sample*sample;
	if(sample>max){max=sample;}
	
    }
    rect.x=w;
    rect.top=100-max*90;
    timeline.fillRect(rect,0x0000FF);
    rect.top=100-Math.sqrt(rms/len)*90;
    timeline.fillRect(rect,0x00FF00);
    
	
    }
    
    pos=0;
playback.play();
update();
}

function onMove(e:MouseEvent){
    if(e.stageY<100){
    pos=e.stageX*BUF_SIZE;
    }
}

var win_pos=0;

function getSound(e:SampleDataEvent){
    var data:ByteArray=e.data;
    var q;
    bytes.position=0;
    infile.extract(bytes,BUF_SIZE,pos);
    bytes.position=0;
    var overlay=overlaySlider.value*BUF_SIZE;
    var tmpbuf=[];

    var g:Graphics=monitor.graphics;
    g.clear();


for(q=0;q<window;q++){
	tmpbuf[q*2]=bytes.readFloat();
	tmpbuf[q*2+1]=bytes.readFloat();
    }

    g.lineStyle(1,0xFF0000);
    g.moveTo(0,50);
for(q=0;q<window;q++){
    g.lineTo(q/10,tmpbuf[q*2]*25+25);
    
}
    g.lineStyle(1,0xFF00FF);
    g.moveTo(0,50);
for(q=0;q<window;q++){
    g.lineTo(q/10,tmpbuf[q*2+1]*25+25);
    
}




    var mult;
    for(q=0;q<overlay;q++){
	mult=q/overlay;
	tmpbuf[q*2]=tmpbuf[(window-q-1)*2]*(1-mult)+tmpbuf[q*2]*mult;
	tmpbuf[q*2+1]=tmpbuf[(window-q-1)*2+1]*(1-mult)+tmpbuf[q*2+1]*mult;
    }
    
    var win=tmpbuf;
    tmpbuf=[];
    var winlen=window*2;
    for(q=0;q<BUF_SIZE;q++){
	if(win_pos>=window){win_pos=0;}
	tmpbuf[q*2]=win[win_pos*2];
	tmpbuf[q*2+1]=win[win_pos*2+1];
	win_pos++;
    }
    
    
    g.lineStyle(1,0xFFFF00);
    g.moveTo(0,50);
for(q=0;q<BUF_SIZE;q++){
    g.lineTo(q/10,tmpbuf[q*2]*50+50);
    
}
    g.lineStyle(1,0x00FFFF);
    g.moveTo(0,50);
for(q=0;q<BUF_SIZE;q++){
    g.lineTo(q/10,tmpbuf[q*2+1]*50+50);
    
}
    
    
    for(q=0;q<BUF_SIZE*2;q++){
	data.writeFloat(tmpbuf[q]);
    }
    
    pos+=Math.floor(speedSlider.value*2*BUF_SIZE);
    update();
}











